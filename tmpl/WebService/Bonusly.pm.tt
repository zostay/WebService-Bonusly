[% WARNING %]
package WebService::Bonusly;

use v5.14;
use Moose;

extends 'WebService::Bonusly::Base';

[% FOR service IN services -%]
use WebService::Bonusly::[% service.ucfirst -%];
[% END -%]

# ABSTRACT: A handy library for accessing the Bonus.ly API

=head1 SYNOPSIS

    use WebService::Bonusly;
    my $bonusly = WebService::Bonusly->new( token => $token );
    [% FOR service IN services -%]
    [% FOR method IN api.$service %]
    $res = $bonusly->[% service %]->[% method.key %][% IF method.value.required.size == 1 %]([% FOR field IN method.value.required %] [% field %] => '...' [% END %])[% ELSIF method.value.required.size > 1 %]([% FOR field IN method.value.required %]
        [% field %] => [% IF field == 'amount' %]42[% ELSE %]'...'[% END %],[% END %]
    )[% END %];[% END %]
    [% END %]
=head1 DESCRIPTION

This is a fairly simple library for performing actions with the Bonus.ly API.

=head1 ERRORS

Normally bonusly will return C<< { success => 0, message => $reason } >> when
there are errors, but on the off chance that something went really wrong,
C<WebService::Bonusly> will synthesize a data structure like this:

 {
     success => 0,
     message => 'Not Found',
     status => 404,
     content => "<html>...",
     response_object => HTTP::Response->new(...),
 }

When handling errors, you B<may> want to consider checking if there is a
C<response_object> and logging its contents somewhere.

=head1 ATTRIBUTES

=head2 token

This is the access token to use to perform actions with.

=head2 debug

This is a boolean flag that, when set to true, causes messages to be printed to STDERR about what is being sent to and received from bonus.ly. 

This is done through calls to the C<print_debug> method.

[% FOR service IN services -%]
=head2 [% service %]

This provides methods for accessing the [% service.ucfirst %] aspects of the API. This provides the following methods:
[% FOR method IN api.$service %]
=head3 [% method.key %][% obj = 0 %]

    $res = $bonusly->[% service %]->[% method.key %][% IF method.value.required.size > 0 OR method.value.optional.size > 0 %](%params)[% END %];

Performs a [% method.value.method %] against C</api/v1/[% method.value.path %]> at bonus.ly.[% IF method.value.required.size > 0 %]

Required Parameters: [% FOR field IN method.value.required %]C<[% IF field.match('^%') %][% obj = field.substr(1) %][% field.substr(1) %][% ELSE %][% field %][% END %]>[% UNLESS loop.last %], [% END %][% END %][% END %][% IF method.value.optional.size > 0 %]

Optional Parameters: [% FOR field IN method.value.optional %]C<[% IF field.match('^%') %][% obj = field.substr(1) %][% field.substr(1) %][% ELSE %][% field %][% END %]>[% UNLESS loop.last %], [% END %][% END %][% END %][% IF obj %]

The C<[% obj %]> parameter must be given a reference to a hash.[% END %]
[% END %]
=cut

has [% service -%] => (
    is          => 'ro',
    isa         => 'WebService::Bonusly::[% service.ucfirst -%]',
    required    => 1,
    lazy        => 1,
    builder     => __PACKAGE__->_service_builder('[% service -%]'),
);

[% END -%]

=head1 DEVELOPMENT

If you are interested in helping develop this library. Please check it out from github. See L<https://github.com/zostay/WebService-Bonusly>. The library is automatically generated from a script named F<apigen.pl>. To build the library you will need to install L<Dist::Zilla> and run:

    dzil authordeps | cpanm
    dzil build

Instead of running the "dzil build" command you may also run:

    ./apigen.pl

The templates for generating the code are found in F<tmpl>.

=cut

__PACKAGE__->meta->make_immutable;
